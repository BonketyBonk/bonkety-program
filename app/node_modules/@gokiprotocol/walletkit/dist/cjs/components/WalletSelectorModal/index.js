"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletSelectorModal = exports.ModalStep = void 0;
const jsx_runtime_1 = require("@emotion/react/jsx-runtime");
const use_solana_1 = require("@saberhq/use-solana");
const react_1 = require("react");
const react_device_detect_1 = require("react-device-detect");
const Modal_1 = require("../Modal");
const WalletStepConnecting_1 = require("./WalletStepConnecting");
const WalletStepIntro_1 = require("./WalletStepIntro");
const DefaultAppIcon_1 = require("./WalletStepIntro/DefaultAppIcon");
const WalletStepLedgerAdvanced_1 = require("./WalletStepLedgerAdvanced");
const WalletStepRedirect_1 = require("./WalletStepRedirect");
const WalletStepSecretKey_1 = require("./WalletStepSecretKey");
const WalletStepSelect_1 = require("./WalletStepSelect");
var ModalStep;
(function (ModalStep) {
    ModalStep["Intro"] = "intro";
    ModalStep["Select"] = "select";
    ModalStep["Redirect"] = "redirect";
    ModalStep["Connecting"] = "connecting";
    ModalStep["LedgerAdvanced"] = "ledger-advanced";
    ModalStep["SecretKey"] = "secret-key";
})(ModalStep = exports.ModalStep || (exports.ModalStep = {}));
const defaultOnWalletKitError = (err) => {
    console.error(err);
};
const WalletSelectorModal = ({ app, onWalletKitError = defaultOnWalletKitError, initialStep = ModalStep.Intro, debugMode, ...modalProps }) => {
    const appIcon = (0, react_1.useMemo)(() => { var _a; return (_a = app.icon) !== null && _a !== void 0 ? _a : (0, jsx_runtime_1.jsx)(DefaultAppIcon_1.DefaultAppIcon, {}); }, [app.icon]);
    const [step, setStep] = (0, react_1.useState)(initialStep);
    const [installProvider, setInstallProvider] = (0, react_1.useState)(null);
    const { disconnect, activate } = (0, use_solana_1.useSolana)();
    const [walletToConnect, setWalletToConnect] = (0, react_1.useState)(null);
    const onDismiss = () => {
        modalProps.onDismiss();
        // unset everything else after the modal unhide animation
        setTimeout(() => {
            setInstallProvider(null);
            setWalletToConnect(null);
            setStep(ModalStep.Intro);
        }, 500);
    };
    return ((0, jsx_runtime_1.jsxs)(Modal_1.Modal, { ...modalProps, onDismiss: onDismiss, onBack: step === ModalStep.Intro
            ? undefined
            : () => {
                switch (step) {
                    case ModalStep.Select:
                        setStep(ModalStep.Intro);
                        break;
                    case ModalStep.Redirect:
                    case ModalStep.Connecting:
                    case ModalStep.SecretKey:
                    case ModalStep.LedgerAdvanced:
                        setStep(ModalStep.Select);
                        break;
                }
            }, hideSolanaLogo: step === ModalStep.Intro, children: [step === ModalStep.Intro && ((0, jsx_runtime_1.jsx)(WalletStepIntro_1.WalletStepIntro, { appName: app.name, appIcon: appIcon, onContinue: () => setStep(ModalStep.Select) })), step === ModalStep.Select && ((0, jsx_runtime_1.jsx)(WalletStepSelect_1.WalletStepSelect, { debugMode: debugMode, 
                // eslint-disable-next-line @typescript-eslint/no-misused-promises
                onSelect: async (info) => {
                    // Allow the wallet to disconnect before attempting to reconnect.
                    await disconnect();
                    if (info.type === use_solana_1.DefaultWalletType.Ledger &&
                        info.info.name === "Ledger (advanced)") {
                        setStep(ModalStep.LedgerAdvanced);
                        return;
                    }
                    if (info.type === use_solana_1.DefaultWalletType.SecretKey) {
                        setStep(ModalStep.SecretKey);
                        return;
                    }
                    setWalletToConnect(info);
                    setStep(ModalStep.Connecting);
                    if (react_device_detect_1.isMobile &&
                        (info.type === use_solana_1.DefaultWalletType.Sollet ||
                            info.type === use_solana_1.DefaultWalletType.Solflare)) {
                        await activate(info.type);
                    }
                }, onInstall: (info) => {
                    setInstallProvider(info);
                    setStep(ModalStep.Redirect);
                } })), step === ModalStep.Redirect && installProvider && ((0, jsx_runtime_1.jsx)(WalletStepRedirect_1.WalletStepRedirect, { info: installProvider })), step === ModalStep.Connecting && walletToConnect && ((0, jsx_runtime_1.jsx)(WalletStepConnecting_1.WalletStepConnecting, { appIcon: appIcon, info: walletToConnect, onBack: () => {
                    setStep(ModalStep.Select);
                }, onComplete: onDismiss })), step === ModalStep.LedgerAdvanced && ((0, jsx_runtime_1.jsx)(WalletStepLedgerAdvanced_1.WalletStepLedgerAdvanced, { onBack: () => {
                    setStep(ModalStep.Select);
                }, onError: onWalletKitError, onSuccess: onDismiss })), step === ModalStep.SecretKey && ((0, jsx_runtime_1.jsx)(WalletStepSecretKey_1.WalletStepSecretKey, { onBack: () => {
                    setStep(ModalStep.Select);
                }, onError: onWalletKitError, onSuccess: onDismiss }))] }));
};
exports.WalletSelectorModal = WalletSelectorModal;
//# sourceMappingURL=index.js.map