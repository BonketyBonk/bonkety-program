"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWalletKit = exports.WalletKitProvider = exports.WalletKitContext = exports.useWallet = exports.useSolana = exports.useConnectedWallet = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("@emotion/react/jsx-runtime");
const use_solana_1 = require("@saberhq/use-solana");
const react_1 = tslib_1.__importStar(require("react"));
const WalletSelectorModal_1 = require("./components/WalletSelectorModal");
var use_solana_2 = require("@saberhq/use-solana");
Object.defineProperty(exports, "useConnectedWallet", { enumerable: true, get: function () { return use_solana_2.useConnectedWallet; } });
Object.defineProperty(exports, "useSolana", { enumerable: true, get: function () { return use_solana_2.useSolana; } });
Object.defineProperty(exports, "useWallet", { enumerable: true, get: function () { return use_solana_2.useWallet; } });
exports.WalletKitContext = react_1.default.createContext(null);
const WalletKitProvider = ({ children, app, initialStep = WalletSelectorModal_1.ModalStep.Intro, debugMode = false, ...solanaProviderArgs }) => {
    const [showWalletSelector, setShowWalletSelector] = (0, react_1.useState)(false);
    const kit = (0, react_1.useMemo)(() => {
        return { connect: () => setShowWalletSelector(true) };
    }, []);
    return ((0, jsx_runtime_1.jsx)(use_solana_1.SolanaProvider, { ...solanaProviderArgs, children: (0, jsx_runtime_1.jsxs)(exports.WalletKitContext.Provider, { value: kit, children: [(0, jsx_runtime_1.jsx)(WalletSelectorModal_1.WalletSelectorModal, { app: app, initialStep: initialStep, isOpen: showWalletSelector, onDismiss: () => setShowWalletSelector(false), debugMode: debugMode }), children] }) }));
};
exports.WalletKitProvider = WalletKitProvider;
/**
 * Returns a function which shows the wallet selector modal.
 */
const useWalletKit = () => {
    const kit = (0, react_1.useContext)(exports.WalletKitContext);
    if (!kit) {
        throw new Error("Not in WalletConnector context");
    }
    return kit;
};
exports.useWalletKit = useWalletKit;
//# sourceMappingURL=WalletKitProvider.js.map