import { jsx as _jsx, jsxs as _jsxs } from "@emotion/react/jsx-runtime";
import { SolanaProvider } from "@saberhq/use-solana";
import React, { useContext, useMemo, useState } from "react";
import { ModalStep, WalletSelectorModal, } from "./components/WalletSelectorModal";
export { useConnectedWallet, useSolana, useWallet } from "@saberhq/use-solana";
export const WalletKitContext = React.createContext(null);
export const WalletKitProvider = ({ children, app, initialStep = ModalStep.Intro, debugMode = false, ...solanaProviderArgs }) => {
    const [showWalletSelector, setShowWalletSelector] = useState(false);
    const kit = useMemo(() => {
        return { connect: () => setShowWalletSelector(true) };
    }, []);
    return (_jsx(SolanaProvider, { ...solanaProviderArgs, children: _jsxs(WalletKitContext.Provider, { value: kit, children: [_jsx(WalletSelectorModal, { app: app, initialStep: initialStep, isOpen: showWalletSelector, onDismiss: () => setShowWalletSelector(false), debugMode: debugMode }), children] }) }));
};
/**
 * Returns a function which shows the wallet selector modal.
 */
export const useWalletKit = () => {
    const kit = useContext(WalletKitContext);
    if (!kit) {
        throw new Error("Not in WalletConnector context");
    }
    return kit;
};
//# sourceMappingURL=WalletKitProvider.js.map