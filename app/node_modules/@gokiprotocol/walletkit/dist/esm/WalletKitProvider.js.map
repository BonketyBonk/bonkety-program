{"version":3,"file":"WalletKitProvider.js","sourceRoot":"","sources":["../../src/WalletKitProvider.tsx"],"names":[],"mappings":";AACA,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE7D,OAAO,EACL,SAAS,EACT,mBAAmB,GACpB,MAAM,kCAAkC,CAAC;AAG1C,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAM/E,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAmB,IAAI,CAAC,CAAC;AAM5E,MAAM,CAAC,MAAM,iBAAiB,GAAoB,CAAC,EACjD,QAAQ,EACR,GAAG,EACH,WAAW,GAAG,SAAS,CAAC,KAAK,EAC7B,SAAS,GAAG,KAAK,EACjB,GAAG,kBAAkB,EACf,EAAE,EAAE;IACV,MAAM,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAC;IAE7E,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE;QACvB,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,CAAC;IACxD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACL,KAAC,cAAc,OAAK,kBAAkB,YACpC,MAAC,gBAAgB,CAAC,QAAQ,IAAC,KAAK,EAAE,GAAG,aACnC,KAAC,mBAAmB,IAClB,GAAG,EAAE,GAAG,EACR,WAAW,EAAE,WAAW,EACxB,MAAM,EAAE,kBAAkB,EAC1B,SAAS,EAAE,GAAG,EAAE,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAC7C,SAAS,EAAE,SAAS,GACpB,EACD,QAAQ,IACiB,GACb,CAClB,CAAC;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,GAAc,EAAE;IAC1C,MAAM,GAAG,GAAG,UAAU,CAAC,gBAAgB,CAAC,CAAC;IACzC,IAAI,CAAC,GAAG,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;KACnD;IACD,OAAO,GAAG,CAAC;AACb,CAAC,CAAC","sourcesContent":["import type { UseSolanaArgs } from \"@saberhq/use-solana\";\nimport { SolanaProvider } from \"@saberhq/use-solana\";\nimport React, { useContext, useMemo, useState } from \"react\";\n\nimport {\n  ModalStep,\n  WalletSelectorModal,\n} from \"./components/WalletSelectorModal\";\nimport type { WalletKitArgs } from \"./types\";\n\nexport { useConnectedWallet, useSolana, useWallet } from \"@saberhq/use-solana\";\n\nexport interface WalletKit {\n  connect: () => void;\n}\n\nexport const WalletKitContext = React.createContext<WalletKit | null>(null);\n\ninterface Props extends WalletKitArgs, UseSolanaArgs {\n  children: React.ReactNode;\n}\n\nexport const WalletKitProvider: React.FC<Props> = ({\n  children,\n  app,\n  initialStep = ModalStep.Intro,\n  debugMode = false,\n  ...solanaProviderArgs\n}: Props) => {\n  const [showWalletSelector, setShowWalletSelector] = useState<boolean>(false);\n\n  const kit = useMemo(() => {\n    return { connect: () => setShowWalletSelector(true) };\n  }, []);\n\n  return (\n    <SolanaProvider {...solanaProviderArgs}>\n      <WalletKitContext.Provider value={kit}>\n        <WalletSelectorModal\n          app={app}\n          initialStep={initialStep}\n          isOpen={showWalletSelector}\n          onDismiss={() => setShowWalletSelector(false)}\n          debugMode={debugMode}\n        />\n        {children}\n      </WalletKitContext.Provider>\n    </SolanaProvider>\n  );\n};\n\n/**\n * Returns a function which shows the wallet selector modal.\n */\nexport const useWalletKit = (): WalletKit => {\n  const kit = useContext(WalletKitContext);\n  if (!kit) {\n    throw new Error(\"Not in WalletConnector context\");\n  }\n  return kit;\n};\n"]}