{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/components/WalletSelectorModal/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { WalletProviderInfo } from \"@saberhq/use-solana\";\nimport { DefaultWalletType, useSolana } from \"@saberhq/use-solana\";\nimport React, { useMemo, useState } from \"react\";\nimport { isMobile } from \"react-device-detect\";\n\nimport type { WalletKitArgs } from \"../../types\";\nimport type { ModalProps } from \"../Modal\";\nimport { Modal } from \"../Modal\";\nimport { WalletStepConnecting } from \"./WalletStepConnecting\";\nimport { WalletStepIntro } from \"./WalletStepIntro\";\nimport { DefaultAppIcon } from \"./WalletStepIntro/DefaultAppIcon\";\nimport { WalletStepLedgerAdvanced } from \"./WalletStepLedgerAdvanced\";\nimport { WalletStepRedirect } from \"./WalletStepRedirect\";\nimport { WalletStepSecretKey } from \"./WalletStepSecretKey\";\nimport type { ProviderInfo } from \"./WalletStepSelect\";\nimport { WalletStepSelect } from \"./WalletStepSelect\";\n\ntype Props = Omit<ModalProps, \"children\"> & WalletKitArgs;\n\nexport enum ModalStep {\n  Intro = \"intro\",\n  Select = \"select\",\n  Redirect = \"redirect\",\n  Connecting = \"connecting\",\n  LedgerAdvanced = \"ledger-advanced\",\n  SecretKey = \"secret-key\",\n}\n\nconst defaultOnWalletKitError = (err: Error) => {\n  console.error(err);\n};\n\nexport const WalletSelectorModal: React.FC<Props> = ({\n  app,\n  onWalletKitError = defaultOnWalletKitError,\n  initialStep = ModalStep.Intro,\n  debugMode,\n  ...modalProps\n}: Props) => {\n  const appIcon = useMemo(() => app.icon ?? <DefaultAppIcon />, [app.icon]);\n\n  const [step, setStep] = useState<ModalStep>(initialStep);\n\n  const [installProvider, setInstallProvider] =\n    useState<WalletProviderInfo | null>(null);\n\n  const { disconnect, activate } = useSolana();\n  const [walletToConnect, setWalletToConnect] = useState<ProviderInfo | null>(\n    null\n  );\n\n  const onDismiss = () => {\n    modalProps.onDismiss();\n\n    // unset everything else after the modal unhide animation\n    setTimeout(() => {\n      setInstallProvider(null);\n      setWalletToConnect(null);\n      setStep(ModalStep.Intro);\n    }, 500);\n  };\n\n  return (\n    <Modal\n      {...modalProps}\n      onDismiss={onDismiss}\n      onBack={\n        step === ModalStep.Intro\n          ? undefined\n          : () => {\n              switch (step) {\n                case ModalStep.Select:\n                  setStep(ModalStep.Intro);\n                  break;\n                case ModalStep.Redirect:\n                case ModalStep.Connecting:\n                case ModalStep.SecretKey:\n                case ModalStep.LedgerAdvanced:\n                  setStep(ModalStep.Select);\n                  break;\n              }\n            }\n      }\n      hideSolanaLogo={step === ModalStep.Intro}\n    >\n      {step === ModalStep.Intro && (\n        <WalletStepIntro\n          appName={app.name}\n          appIcon={appIcon}\n          onContinue={() => setStep(ModalStep.Select)}\n        />\n      )}\n      {step === ModalStep.Select && (\n        <WalletStepSelect\n          debugMode={debugMode}\n          // eslint-disable-next-line @typescript-eslint/no-misused-promises\n          onSelect={async (info) => {\n            // Allow the wallet to disconnect before attempting to reconnect.\n            await disconnect();\n\n            if (\n              info.type === DefaultWalletType.Ledger &&\n              info.info.name === \"Ledger (advanced)\"\n            ) {\n              setStep(ModalStep.LedgerAdvanced);\n              return;\n            }\n            if (info.type === DefaultWalletType.SecretKey) {\n              setStep(ModalStep.SecretKey);\n              return;\n            }\n\n            setWalletToConnect(info);\n            setStep(ModalStep.Connecting);\n\n            if (\n              isMobile &&\n              (info.type === DefaultWalletType.Sollet ||\n                info.type === DefaultWalletType.Solflare)\n            ) {\n              await activate(info.type);\n            }\n          }}\n          onInstall={(info) => {\n            setInstallProvider(info);\n            setStep(ModalStep.Redirect);\n          }}\n        />\n      )}\n      {step === ModalStep.Redirect && installProvider && (\n        <WalletStepRedirect info={installProvider} />\n      )}\n      {step === ModalStep.Connecting && walletToConnect && (\n        <WalletStepConnecting\n          appIcon={appIcon}\n          info={walletToConnect}\n          onBack={() => {\n            setStep(ModalStep.Select);\n          }}\n          onComplete={onDismiss}\n        />\n      )}\n      {step === ModalStep.LedgerAdvanced && (\n        <WalletStepLedgerAdvanced\n          onBack={() => {\n            setStep(ModalStep.Select);\n          }}\n          onError={onWalletKitError}\n          onSuccess={onDismiss}\n        />\n      )}\n      {step === ModalStep.SecretKey && (\n        <WalletStepSecretKey\n          onBack={() => {\n            setStep(ModalStep.Select);\n          }}\n          onError={onWalletKitError}\n          onSuccess={onDismiss}\n        />\n      )}\n    </Modal>\n  );\n};\n"]}