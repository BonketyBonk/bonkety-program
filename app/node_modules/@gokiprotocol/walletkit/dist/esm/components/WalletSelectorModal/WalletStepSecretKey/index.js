import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "@emotion/react/jsx-runtime";
/* eslint-disable jsx-a11y/anchor-is-valid */
import { css } from "@emotion/react";
import styled from "@emotion/styled";
import { DEFAULT_WALLET_PROVIDERS, DefaultWalletType, useSolana, } from "@saberhq/use-solana";
import { Keypair } from "@solana/web3.js";
import { useMemo, useState } from "react";
import { LabeledInput } from "../../LabeledInput";
import { ButtonWithFooter } from "../ButtonWithFooter";
export const WalletStepSecretKey = ({ onBack, onSuccess, onError, }) => {
    const [keypairStr, setKeypairStr] = useState(JSON.stringify([...Keypair.generate().secretKey]));
    const [keypair, keypairErr] = useMemo(() => {
        try {
            return [
                Keypair.fromSecretKey(Uint8Array.from(JSON.parse(keypairStr))),
                null,
            ];
        }
        catch (e) {
            return [null, e];
        }
    }, [keypairStr]);
    const { activate } = useSolana();
    return (_jsxs(Wrapper, { children: [_jsx(IconWrapper, { children: _jsx(DEFAULT_WALLET_PROVIDERS.SecretKey.icon, {}) }), _jsx("h2", { children: "Enter a JSON Keypair" }), _jsx("p", { css: css `
          color: red !important;
        `, children: "Warning: do not use this outside of testing. If you were told to go here by someone else, don't do it." }), _jsxs(Fields, { children: [_jsx(LabeledInput, { label: "Keypair (JSON)", placeholder: "Enter a JSON keypair string", name: "account", value: keypairStr, onChange: (e) => {
                            setKeypairStr(e.target.value);
                        } }), keypair && (_jsx(LabeledInput, { id: "secretKeyConnectorPubkey", label: "Public Key", name: "publicKey", disabled: true, value: keypair === null || keypair === void 0 ? void 0 : keypair.publicKey.toString() }))] }), keypairErr && (_jsx("p", { children: _jsxs("span", { css: css `
              color: red;
            `, children: ["Error: ", keypairErr.message] }) })), _jsx(ButtonWithFooter, { id: "walletKit_secretKey_continue", disabled: !keypair, 
                // eslint-disable-next-line @typescript-eslint/no-misused-promises
                onClick: async () => {
                    if (!keypair) {
                        throw new Error("keypair missing");
                    }
                    try {
                        await activate(DefaultWalletType.SecretKey, {
                            secretKey: [...keypair.secretKey],
                        });
                    }
                    catch (e) {
                        onError === null || onError === void 0 ? void 0 : onError(e);
                        return;
                    }
                    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();
                }, footer: _jsxs(_Fragment, { children: ["Having trouble?", " ", _jsx("a", { href: "#", onClick: (e) => {
                                e.preventDefault();
                                e.stopPropagation();
                                onBack === null || onBack === void 0 ? void 0 : onBack();
                            }, children: "Go back" })] }), children: "Continue" })] }));
};
const IconWrapper = styled.div `
  & > svg,
  & > img {
    width: 36px;
    height: 36px;
  }
  margin-bottom: 32px;
`;
const Wrapper = styled.div `
  padding: 28px;
  padding-top: 67px;

  & > h2 {
    font-weight: bold;
    font-size: 20px;
    line-height: 25px;
    letter-spacing: -0.02em;
    color: #000000;
  }

  & > p {
    font-weight: normal;
    font-size: 14px;
    line-height: 18px;
    letter-spacing: -0.02em;
    color: #696969;
  }
`;
const Fields = styled.div `
  display: flex;
  flex-direction: column;
  gap: 8px;
  width: 100%;
`;
//# sourceMappingURL=index.js.map