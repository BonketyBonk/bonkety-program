import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "@emotion/react/jsx-runtime";
import styled from "@emotion/styled";
import { DEFAULT_WALLET_PROVIDERS, DefaultWalletType, } from "@saberhq/use-solana";
import { useEffect, useState } from "react";
import { isMobile } from "react-device-detect";
import { WalletProviderOption } from "./WalletProviderOption";
const getWalletProviders = (debugMode = false) => {
    const base = Object.entries(DEFAULT_WALLET_PROVIDERS)
        .filter(([, p]) => typeof window !== "undefined" && isMobile ? p.isMobile : true)
        .slice()
        .sort(([, a], [, b]) => {
        var _a, _b, _c, _d, _e, _f;
        if (typeof window !== "undefined") {
            return ((_b = (_a = a.isInstalled) === null || _a === void 0 ? void 0 : _a.call(a)) !== null && _b !== void 0 ? _b : true) === ((_d = (_c = b.isInstalled) === null || _c === void 0 ? void 0 : _c.call(b)) !== null && _d !== void 0 ? _d : true)
                ? a.name < b.name
                    ? -1
                    : 1
                : ((_f = (_e = a.isInstalled) === null || _e === void 0 ? void 0 : _e.call(a)) !== null && _f !== void 0 ? _f : true)
                    ? -1
                    : 1;
        }
        return a.name < b.name ? -1 : 1;
    })
        .map(([walletType, info]) => ({
        type: walletType,
        info,
        mustInstall: walletType === DefaultWalletType.ReadOnly
            ? !debugMode
            : !!(typeof window !== "undefined" &&
                info.isInstalled &&
                info.isInstalled()),
    }))
        .filter((p) => debugMode
        ? true
        : p.type !== DefaultWalletType.SecretKey &&
            p.type !== DefaultWalletType.ReadOnly);
    return [
        ...base,
        {
            type: DefaultWalletType.Ledger,
            info: {
                ...DEFAULT_WALLET_PROVIDERS.Ledger,
                name: "Ledger (advanced)",
                url: "https://ledger.com",
                isMobile: false,
            },
            mustInstall: false,
        },
    ];
};
export const WalletStepSelect = ({ onSelect, onInstall, debugMode, }) => {
    const [showUninstalled, setShowUninstalled] = useState(false);
    const [providerInfo, setProviderInfo] = useState(getWalletProviders(debugMode));
    useEffect(() => {
        // wait a second for everything to load
        const timeout = setTimeout(() => {
            setProviderInfo(getWalletProviders(debugMode));
        }, 1000);
        return () => clearTimeout(timeout);
    }, [debugMode]);
    return (_jsxs(_Fragment, { children: [_jsx(Heading, { children: "Select your wallet" }), _jsxs(ScrollArea, { children: [_jsx(Wallets, { children: providerInfo
                            .filter((prov) => showUninstalled
                            ? true
                            : prov.mustInstall || !prov.info.isInstalled)
                            .map((fullInfo) => {
                            const { info: provider, type } = fullInfo;
                            return (_jsx(WalletProviderOption, { type: type, info: provider, onSelect: () => {
                                    onSelect === null || onSelect === void 0 ? void 0 : onSelect(fullInfo);
                                }, onInstall: onInstall }, provider.url));
                        }) }), _jsx(ShowUninstalledWrapper, { children: _jsxs(ShowUninstalled, { onClick: () => setShowUninstalled(!showUninstalled), children: [showUninstalled ? "Hide" : "Show", " uninstalled wallets"] }) })] })] }));
};
const ScrollArea = styled.div `
  height: calc(100% - 125px);
  overflow-y: scroll;
`;
const Wallets = styled.div `
  display: grid;
  grid-auto-flow: row;
  grid-auto-rows: 65px;
`;
const Heading = styled.h2 `
  padding: 48px 28px 0;

  font-weight: bold;
  font-size: 20px;
  line-height: 25px;
  letter-spacing: -0.02em;
  color: #000000;
  margin-bottom: 24px;
`;
const ShowUninstalled = styled.a `
  text-decoration: none;
  cursor: pointer;
  &:hover {
    text-decoration: underline;
  }
`;
const ShowUninstalledWrapper = styled.div `
  margin: 24px 0;
  width: 100%;

  display: flex;
  flex-direction: column;
  align-items: center;
`;
//# sourceMappingURL=index.js.map