import { jsx as _jsx, jsxs as _jsxs } from "@emotion/react/jsx-runtime";
import { DefaultWalletType, useSolana } from "@saberhq/use-solana";
import { useMemo, useState } from "react";
import { isMobile } from "react-device-detect";
import { Modal } from "../Modal";
import { WalletStepConnecting } from "./WalletStepConnecting";
import { WalletStepIntro } from "./WalletStepIntro";
import { DefaultAppIcon } from "./WalletStepIntro/DefaultAppIcon";
import { WalletStepLedgerAdvanced } from "./WalletStepLedgerAdvanced";
import { WalletStepRedirect } from "./WalletStepRedirect";
import { WalletStepSecretKey } from "./WalletStepSecretKey";
import { WalletStepSelect } from "./WalletStepSelect";
export var ModalStep;
(function (ModalStep) {
    ModalStep["Intro"] = "intro";
    ModalStep["Select"] = "select";
    ModalStep["Redirect"] = "redirect";
    ModalStep["Connecting"] = "connecting";
    ModalStep["LedgerAdvanced"] = "ledger-advanced";
    ModalStep["SecretKey"] = "secret-key";
})(ModalStep || (ModalStep = {}));
const defaultOnWalletKitError = (err) => {
    console.error(err);
};
export const WalletSelectorModal = ({ app, onWalletKitError = defaultOnWalletKitError, initialStep = ModalStep.Intro, debugMode, ...modalProps }) => {
    const appIcon = useMemo(() => { var _a; return (_a = app.icon) !== null && _a !== void 0 ? _a : _jsx(DefaultAppIcon, {}); }, [app.icon]);
    const [step, setStep] = useState(initialStep);
    const [installProvider, setInstallProvider] = useState(null);
    const { disconnect, activate } = useSolana();
    const [walletToConnect, setWalletToConnect] = useState(null);
    const onDismiss = () => {
        modalProps.onDismiss();
        // unset everything else after the modal unhide animation
        setTimeout(() => {
            setInstallProvider(null);
            setWalletToConnect(null);
            setStep(ModalStep.Intro);
        }, 500);
    };
    return (_jsxs(Modal, { ...modalProps, onDismiss: onDismiss, onBack: step === ModalStep.Intro
            ? undefined
            : () => {
                switch (step) {
                    case ModalStep.Select:
                        setStep(ModalStep.Intro);
                        break;
                    case ModalStep.Redirect:
                    case ModalStep.Connecting:
                    case ModalStep.SecretKey:
                    case ModalStep.LedgerAdvanced:
                        setStep(ModalStep.Select);
                        break;
                }
            }, hideSolanaLogo: step === ModalStep.Intro, children: [step === ModalStep.Intro && (_jsx(WalletStepIntro, { appName: app.name, appIcon: appIcon, onContinue: () => setStep(ModalStep.Select) })), step === ModalStep.Select && (_jsx(WalletStepSelect, { debugMode: debugMode, 
                // eslint-disable-next-line @typescript-eslint/no-misused-promises
                onSelect: async (info) => {
                    // Allow the wallet to disconnect before attempting to reconnect.
                    await disconnect();
                    if (info.type === DefaultWalletType.Ledger &&
                        info.info.name === "Ledger (advanced)") {
                        setStep(ModalStep.LedgerAdvanced);
                        return;
                    }
                    if (info.type === DefaultWalletType.SecretKey) {
                        setStep(ModalStep.SecretKey);
                        return;
                    }
                    setWalletToConnect(info);
                    setStep(ModalStep.Connecting);
                    if (isMobile &&
                        (info.type === DefaultWalletType.Sollet ||
                            info.type === DefaultWalletType.Solflare)) {
                        await activate(info.type);
                    }
                }, onInstall: (info) => {
                    setInstallProvider(info);
                    setStep(ModalStep.Redirect);
                } })), step === ModalStep.Redirect && installProvider && (_jsx(WalletStepRedirect, { info: installProvider })), step === ModalStep.Connecting && walletToConnect && (_jsx(WalletStepConnecting, { appIcon: appIcon, info: walletToConnect, onBack: () => {
                    setStep(ModalStep.Select);
                }, onComplete: onDismiss })), step === ModalStep.LedgerAdvanced && (_jsx(WalletStepLedgerAdvanced, { onBack: () => {
                    setStep(ModalStep.Select);
                }, onError: onWalletKitError, onSuccess: onDismiss })), step === ModalStep.SecretKey && (_jsx(WalletStepSecretKey, { onBack: () => {
                    setStep(ModalStep.Select);
                }, onError: onWalletKitError, onSuccess: onDismiss }))] }));
};
//# sourceMappingURL=index.js.map